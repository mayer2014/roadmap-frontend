1. 作用域：
js 中的作用域是词法作用域，是由 函数声明时 所在的位置决定的

词法作用域是在编译阶段就确认的，区别于词法作用域，动态作用域是在函数执行的时候确认的，js的没有动态作用域，但js的this很像动态作用域
语言也分为静态语言和动态语言，静态语言是指数据类型在编译阶段就确定的语言如 java，动态语言是指在运行阶段才确定数据类型的语言如 javascript。

2. 作用域链：
作用域链本质上是一个指向变量对象的指针列表，它只引用不包含实际变量对象，
是作用域概念的延申。作用域链定义了在当前上下文访问不到变量的时候如何沿作用域链继续查询变量的一套规则。


3. 执行上下文：
执行上下文是指 函数调用时 在执行栈中产生的变量对象，这个变量对象我们无法直接访问，但是可以访问其中的变量、this对象等。例如：

每次函数调用时，执行栈栈顶都会产生一个新的执行上下文环境，JavaScript引擎会以栈的方式来处理它们，
这个栈，我们称其为函数调用栈(call stack)。栈底永远都是全局上下文，而栈顶就是当前处于活动状态的正在执行的上下文，
也称为活动对象（running execution context，图中蓝色的块），区别与底下被挂起的变量对象（执行上下文）。

4. 理解函数的执行过程
分为两个阶段：
(1)创建执行上下文阶段：（发生在 函数被调用时 && 函数体内的代码执行前）
  1. 生成变量对象，顺序：创建 arguments 对象 --> 创建function函数声明 --> 创建var变量声明
  2. 生成作用域链
  3. 确定this的指向
(2) 函数执行阶段:
逐行执行代码，这个阶段会完成变量赋值，函数引用，以及执行其他代码

会存在暂时性死区的概念



理解：
执行上下文栈可以认为是一个存储函数调用的栈结构，遵循先进后出的原则。
JavaScript执行在单线程上，所有的代码都是排队执行。
一开始浏览器执行全局的代码时，首先创建全局的执行上下文，压入执行栈的顶部。
每当进入一个函数的执行就会创建函数的执行上下文，并且把它压入执行栈的顶部。当前函数执行-完成后，当前函数的执行上下文出栈，并等待垃圾回收。
浏览器的JS执行引擎总是访问栈顶的执行上下文。
全局上下文只有唯一的一个，它在浏览器关闭时出栈。


作用域链: 无论是 LHS 还是 RHS 查询，都会在当前的作用域开始查找，如果没有找到，
就会向上级作用域继续查找目标标识符，每次上升一个作用域，一直到全局作用域为止。





