1. JS 类型转换的规则是什么？
JS中类型转换分为 强制类型转换 和 隐式类型转换 。

通过 Number()、parseInt()、parseFloat()、toString()、String()、Boolean(),进行强制类型转换。

逻辑运算符(&&、 ||、 !)、运算符(+、-、*、/)、关系操作符(>、 <、 <= 、>=)、相等运算符(==)或者 if/while 的条件，可能会进行隐式类型转换。

2. 强制类型转换
Number() 将任意类型的参数转换为数值类型
规则如下:

如果是布尔值，true和false分别被转换为1和0
如果是数字，返回自身
如果是 null，返回 0
如果是 undefined，返回 NAN
如果是字符串，遵循以下规则:

如果字符串中只包含数字(或者是 0X / 0x 开头的十六进制数字字符串，允许包含正负号)，则将其转换为十进制
如果字符串中包含有效的浮点格式，将其转换为浮点数值
如果是空字符串，将其转换为0
如不是以上格式的字符串，均返回 NaN


如果是Symbol，抛出错误
如果是对象，则调用对象的 valueOf() 方法，然后依据前面的规则转换返回的值。如果转换的结果是 NaN ，则调用对象的 toString() 方法，再次依照前面的规则转换返回的字符串值。

部分内置对象调用默认的 valueOf 的行为:

parseInt(param, radix)

第一个参数传入的是字符串类型
  忽略字符串前面的空格，直至找到第一个非空字符，如果是空字符串，返回NaN
  如果第一个字符不是数字符号或者正负号，返回NaN
  如果第一个字符是数字/正负号，则继续解析直至字符串解析完毕或者遇到一个非数字符号为止
第一个参数传入的Number类型
  数字如果是0开头，则将其当作八进制来解析(如果是一个八进制数)；如果以0x开头，则将其当作十六进制来解析
第一个参数是 null 或者是 undefined，或者是一个对象类型: 返回 NaN
第一个参数是数组： 1. 去数组的第一个元素，按照上面的规则进行解析
第一个参数是Symbol类型： 1. 抛出错误

parseInt('0111'); //111
parseInt('');//NaN
parseInt(['10aa','aaa']);//10
parseInt([]);//NaN; parseInt(undefined);


3. 隐式类型转换
相等操作符：==:
如果类型相同，无需进行类型转换。
如果其中一个操作值是 null 或者是 undefined，那么另一个操作符必须为 null 或者 undefined 时，才返回 true，否则都返回 false.
如果其中一个是 Symbol 类型，那么返回 false.
两个操作值是否为 string 和 number，就会将字符串转换为 number
如果一个操作值是 boolean，那么转换成 number
如果一个操作值为 object 且另一方为 string、number 或者 symbol，是的话就会把 object 转为原始类型再进行判断(调用object的valueOf/toString方法进行转换)

对象如何转换成原始数据类型
如果部署了 [Symbol.toPrimitive] 接口，那么调用此接口，若返回的不是基础数据类型，抛出错误。
如果没有部署 [Symbol.toPrimitive] 接口，那么先返回 valueOf() 的值，若返回的不是基础类型的值，
再返回 toString() 的值，若返回的不是基础类型的值， 则抛出异常。
