HTTP 存在三个弊端：
通信使用明文，内容可能会被窃听，裸跑
不验证通信方的身份，因此可能遭遇伪装
无法证明报文的完整性，所有可能已遭篡改

Https = Http + SSL协议/TLS协议
数据先经过Http，再进入SSL加密，再进入TCP层

SSL采用了一些加密算法：
对称加密（共享密匙加密）：客户端和服务器公用一个密匙用来对消息加解密，这种方式称为对称加密。
客户端和服务器约定好一个加密的密匙。客户端在发消息前用该密匙对消息加密，发送给服务器后，服务器再用该密匙进行解密拿到消息


非对称加密（公有密匙加密）：客户端和服务端均拥有一个公有密匙和一个私有密匙。公有密匙可以对外暴露，而私有密匙只有自己可见。
使用公有密匙加密的消息，只有对应的私有密匙才能解开。反过来，使用私有密匙加密的消息，只有公有密匙才能解开。
这样客户端在发送消息前，先用服务器的公匙对消息进行加密，服务器收到后再用自己的私匙进行解密。


由于公钥谁都可见，
第一件是中间人可以在客户端与服务器交换公匙的时候，将客户端的公匙替换成自己的。服务器也无法判断公匙来源的正确性。
第二件是中间人可以不替换公匙，但是他可以截获客户端发来的消息，然后篡改，然后用服务器的公匙加密再发往服务器，服务器将收到错误的消息。

Https采用以上两种混合式加密，使用非对称加密加密共享密钥。


为了解决非对称加密中公匙来源的不安全性。我们可以使用数字证书和数字签名来解决。
也是使用非对称加密，但是server的目是为了公钥不能对外暴露，安全地发送给client，这是就需要借助一些权威的认证机构，对公钥加密，发送到client后，
client也用权威认证机构的密钥解密出公钥

具体：
server先生成一对密钥，拿着公钥和企业信息等去权威机构申请数字证书，权威机构会用企业信息加密出摘要，然后对摘要使用密钥加密，
生成数字签名，数字签名+server的公钥生成数字证书发给server
server拿到数字证书后，发送给client，client需要使用权威机构的公钥解密，此时电脑和浏览器默认会内置一些权威机构的根证书和公钥，
client使用公钥解密后，得到摘要，再按自己的申请信息用同样的加密算法对明文信息生成一份摘要，两份摘要对比一样，则说明内容完整，没有被篡改，
这样client就安全的拿到server的公钥

数字签名保证内容的完整性



https://mp.weixin.qq.com/s/gKt-p1xutxl9KH9F9iBbMg



